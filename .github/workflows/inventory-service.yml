name: CloudForge inventory-service Pipeline

on:
  push:
    branches: ["main"]
    paths:
      - 'inventory-service/**'
      - '.github/workflows/inventory-service.yml'
  pull_request:
    branches: ["main"]
    paths:
      - 'inventory-service/**'
      - '.github/workflows/inventory-service.yml'

jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code from main branch
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven (clean install)
        run: |
          cd ./inventory-service
          mvn clean install -DskipTests

     

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: ./inventory-service/target/surefire-reports/

      - name: Upload compiled JAR
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: ./inventory-service/target/*.jar

  security-check:
    runs-on: self-hosted
    needs: compile
    steps:
      - name: 🚚 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download existing .done files
        uses: actions/download-artifact@v4
        with:
          
          name: product-done-files 
          path: ./.github/done-files/
        continue-on-error: true

      - name: 🔍 Check if security scan needed
        id: check_scan
        run: |
          CHANGES_DETECTED="${{ needs.build_and_test.outputs.changes_detected }}"
          if [ -f ./.github/done-files/security.done ] && [ "$CHANGES_DETECTED" == "false" ]; then
            echo "skip_scan=true" >> $GITHUB_ENV
          else
            echo "skip_scan=false" >> $GITHUB_ENV
          fi

      - name: 🔐 Run Trivy Scan
        run: trivy fs --security-checks vuln --format table -o fs-report.txt ./inventory-service/

      - name: 📌 Mark security as done
        if: ${{ env.skip_scan != 'true' }}
        run: |
          mkdir -p ./.github/done-files/
          echo "done" > ./.github/done-files/security.done

      - name: 📤 Upload updated .done files
        uses: actions/upload-artifact@v4
        with:
          
          name: product-done-files 
          path: ./.github/done-files/
          retention-days: 3

  SonarQube_Analysis:
    runs-on: self-hosted
    needs: security-check
    steps:
      - name: Checkout code with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download sonar.done if exists
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: sonar-done
          path: .

      - name: Check if sonar already done
        id: check_sonar
        run: |
          if [ -f sonar.done ]; then
            echo "skip=true" >> $GITHUB_ENV
          else
            echo "skip=false" >> $GITHUB_ENV
          fi

      - name: SonarQube Scan
        if: ${{ env.skip != 'true' }}
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        with:
          projectBaseDir: ./inventory-service
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: http://192.168.216.131:9000/

      - name: Download SonarQube JSON Report
        if: ${{ env.skip != 'true' }}
        run: |
          curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "http://192.168.216.131:9000/api/issues/search?componentKeys=CloudForge&resolved=false" \
            -o sonar-report.json

      - name: Upload SonarQube report
        if: ${{ env.skip != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: sonar-report
          path: sonar-report.json

      - name: Mark sonar done
        if: ${{ env.skip != 'true' }}
        run: echo "Sonar done" > sonar.done

      - name: Upload sonar.done
        if: ${{ env.skip != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: sonar-done
          path: sonar.done

  build_docker_image_and_push:
    runs-on: self-hosted
    needs: SonarQube_Analysis
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: raslenmissaoui061
          
          password: ${{ secrets.DOCKER_PASSWORD }} 

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./inventory-service
          push: true
          tags: raslenmissaoui061/inventory-service
          file: ./inventory-service/Dockerfile
  


  deploy-to-k8s-blue-green:
    runs-on: self-hosted
    needs: build_docker_image_and_push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: deploy inventory-service-config
        run: kubectl apply -f k8s/inventory-service/inventory-service-config.yml -n cloudforge
  
      - name: Deploy blue deployment
        run: kubectl apply -f k8s/inventory-service/inventory-blue.yml -n cloudforge

      - name: Deploy green deployment
        run: kubectl apply -f k8s/inventory-service/inventory-green.yml -n cloudforge

      - name: Wait for blue rollout
        run: kubectl rollout status deployment/inventory-service-blue -n cloudforge --timeout=800s

      - name: Wait for green rollout
        run: kubectl rollout status deployment/inventory-service-green -n cloudforge --timeout=800s

      - name: Get current active color (or fallback to blue)
        id: get-color
        run: |
          set -e
          SVC_EXISTS=$(kubectl get svc inventory-service -n cloudforge --ignore-not-found)
    
          if [[ -z "$SVC_EXISTS" ]]; then
            echo "No existing service found. Creating service pointing to blue."
            kubectl apply -f k8s/inventory-service/inventoryservice-service.yml -n cloudforge
            echo "ACTIVE_COLOR=blue" >> $GITHUB_ENV
            echo "INACTIVE_COLOR=green" >> $GITHUB_ENV
          else
            CURRENT_COLOR=$(kubectl get svc inventory-service -n cloudforge -o jsonpath='{.spec.selector.color}' || echo "")
            if [[ "$CURRENT_COLOR" == "blue" ]]; then
              echo "INACTIVE_COLOR=green" >> $GITHUB_ENV
              echo "ACTIVE_COLOR=blue" >> $GITHUB_ENV
            elif [[ "$CURRENT_COLOR" == "green" ]]; then
              echo "INACTIVE_COLOR=blue" >> $GITHUB_ENV
              echo "ACTIVE_COLOR=green" >> $GITHUB_ENV
            else
              echo "No color selector found in existing service. Switching to blue."
              kubectl patch svc inventory-service -n cloudforge -p '{"spec": {"selector": {"app": "inventory-service", "color": "blue"}}}'
              echo "INACTIVE_COLOR=green" >> $GITHUB_ENV
              echo "ACTIVE_COLOR=blue" >> $GITHUB_ENV
            fi
          fi

      - name: Switch service to new version
        run: |
          echo "Switching service from ${{ env.ACTIVE_COLOR }} to ${{ env.INACTIVE_COLOR }}"
          kubectl patch svc inventory-service -n cloudforge -p '{"spec": {"selector": {"app": "inventory-service", "color": "${{ env.INACTIVE_COLOR }}"}}}'
  
  notify_discord:
    runs-on: ubuntu-latest
    needs: [compile, security-check, SonarQube_Analysis, build_docker_image_and_push,  deploy-to-k8s-blue-green ]
    if: always()
    steps:
      - name: Get start time
        id: start
        run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Wait a bit to calculate duration
        run: sleep 5

      - name: Calculate and send Discord notification
        run: |
          end_time=$(date +%s)
          duration=$(( end_time - ${{ steps.start.outputs.start_time }} ))
          minutes=$((duration / 60))
          seconds=$((duration % 60))

          # On vérifie le statut du dernier job critique (le déploiement)
          status="${{ needs.deploy-to-k8s-blue-green.result }}"
          if [ "$status" = "success" ]; then
            color="🟢"
          elif [ "$status" = "failure" ]; then
            color="🔴"
          else
            color="🟡"
          fi

          message="**$color inventory-service Angular CI/CD**\n🔧 Workflow: \`${{ github.workflow }}\`\n💼 Status: **$status**\n👤 Auteur: \`${{ github.actor }}\`\n🕒 Durée: ${minutes}m ${seconds}s\n🔗 [Voir sur GitHub](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"

          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"$message\"}" \
               ${{ secrets.DISCORD_WEBHOOK }}
