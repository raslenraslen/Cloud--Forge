name: api-gateway Pipeline cloudforge

on:
  push:
    branches: ["main"]
    paths:
      - 'api-gateway/**'
      - '.github/workflows/api-gateway.yml'
  pull_request:
    branches: ["main"]
    paths:
      - 'api-gateway/**'
      - '.github/workflows/api-gateway.yml'

jobs:
  
         

  SonarQube_Analysis:
    runs-on: self-hosted
    
    steps:
      - name: Checkout code with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download sonar.done if exists
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: sonar-done
          path: .

      - name: Check if sonar already done
        id: check_sonar
        run: |
          if [ -f sonar.done ]; then
            echo "skip=true" >> $GITHUB_ENV
          else
            echo "skip=false" >> $GITHUB_ENV
          fi

      - name: SonarQube Scan
        if: ${{ env.skip != 'true' }}
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        with:
          projectBaseDir: ./api-gateway
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: http://192.168.216.131:9000/

      - name: Download SonarQube JSON Report
        if: ${{ env.skip != 'true' }}
        run: |
          curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "http://192.168.216.131:9000/api/issues/search?componentKeys=CloudForge&resolved=false" \
            -o sonar-report.json

      - name: Upload SonarQube report
        if: ${{ env.skip != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: sonar-report
          path: sonar-report.json

      - name: Mark sonar done
        if: ${{ env.skip != 'true' }}
        run: echo "Sonar done" > sonar.done

      - name: Upload sonar.done
        if: ${{ env.skip != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: sonar-done
          path: sonar.done

  

  deploy-to-k8s-blue-green:
    runs-on: self-hosted
   
    steps:
      
      - name: deploy api-gateway
        run: kubectl apply -f k8s/api-gateway/api-gateway.yml -n cloudforge

      - name: Get current active color (or fallback to blue)
        id: get-color
        run: |
          set -e
          SVC_EXISTS=$(kubectl get svc api-gateway -n cloudforge --ignore-not-found)
    
          if [[ -z "$SVC_EXISTS" ]]; then
            echo "No existing service found. Creating service pointing to blue."
            kubectl apply -f k8s/api-gateway/productservice-service.yml -n cloudforge
            echo "ACTIVE_COLOR=blue" >> $GITHUB_ENV
            echo "INACTIVE_COLOR=green" >> $GITHUB_ENV
          else
            CURRENT_COLOR=$(kubectl get svc api-gateway -n cloudforge -o jsonpath='{.spec.selector.color}' || echo "")
            if [[ "$CURRENT_COLOR" == "blue" ]]; then
              echo "INACTIVE_COLOR=green" >> $GITHUB_ENV
              echo "ACTIVE_COLOR=blue" >> $GITHUB_ENV
            elif [[ "$CURRENT_COLOR" == "green" ]]; then
              echo "INACTIVE_COLOR=blue" >> $GITHUB_ENV
              echo "ACTIVE_COLOR=green" >> $GITHUB_ENV
            else
              echo "No color selector found in existing service. Switching to blue."
              kubectl patch svc api-gateway -n cloudforge -p '{"spec": {"selector": {"app": "api-gateway", "color": "blue"}}}'
              echo "INACTIVE_COLOR=green" >> $GITHUB_ENV
              echo "ACTIVE_COLOR=blue" >> $GITHUB_ENV
            fi
          fi

      - name: Switch service to new version
        run: |
          echo "Switching service from ${{ env.ACTIVE_COLOR }} to ${{ env.INACTIVE_COLOR }}"
          kubectl patch svc api-gateway -n cloudforge -p '{"spec": {"selector": {"app": "api-gateway", "color": "${{ env.INACTIVE_COLOR }}"}}}'
  
  notify_discord:
    runs-on: ubuntu-latest
    needs: [ SonarQube_Analysis,  deploy-to-k8s-blue-green ]
    if: always()
    steps:
      - name: Get start time
        id: start
        run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Wait a bit to calculate duration
        run: sleep 5

      - name: Calculate and send Discord notification
        run: |
          end_time=$(date +%s)
          duration=$(( end_time - ${{ steps.start.outputs.start_time }} ))
          minutes=$((duration / 60))
          seconds=$((duration % 60))

          # On vÃ©rifie le statut du dernier job critique (le dÃ©ploiement)
          status="${{ needs.deploy-to-k8s-blue-green.result }}"
          if [ "$status" = "success" ]; then
            color="ðŸŸ¢"
          elif [ "$status" = "failure" ]; then
            color="ðŸ”´"
          else
            color="ðŸŸ¡"
          fi

          message="**$color api-gateway Angular CI/CD**\nðŸ”§ Workflow: \`${{ github.workflow }}\`\nðŸ’¼ Status: **$status**\nðŸ‘¤ Auteur: \`${{ github.actor }}\`\nðŸ•’ DurÃ©e: ${minutes}m ${seconds}s\nðŸ”— [Voir sur GitHub](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"

          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"$message\"}" \
               ${{ secrets.DISCORD_WEBHOOK }}
