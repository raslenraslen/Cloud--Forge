name: notification-service Pipeline

on:
  push:
    branches: ["main"]
    paths:
      - 'notification-service/**'
      - '.github/workflows/notification-service.yml'
  pull_request:
    branches: ["main"]
    paths:
      - 'notification-service/**'
      - '.github/workflows/notification-service.yml'


permissions:
  id-token: write   
  contents: read

# Variables globales pour le pipeline
env:
  SERVICE_DIR: ./notification-service
  IMAGE_NAME: raslenmissaoui061/notification-service
  K8S_NAMESPACE: cloudforge
  
jobs:
  ###################################################
  # JOB 1: R√©cup√©rer les secrets depuis VAULT
  ###################################################
  get-secrets:
    runs-on: self-hosted # Peut tourner sur un runner public car n'acc√®de pas √† l'infra
    outputs:
      docker_password: ${{ steps.vault.outputs.DOCKER_PASSWORD }}
      SONAR_TOKEN: ${{ steps.vault.outputs.SONAR_TOKEN }}
      discord_webhook: ${{ steps.vault.outputs.DISCORD_WEBHOOK }}
    steps:
      - name: 'Import Secrets from Vault'
        id: vault
        uses: hashicorp/vault-action@v2
        with:
          # IMPORTANT: Remplacez par l'URL publique de votre Vault
          url: http://192.168.216.131:32441
          method: jwt
          role: notification-service-role
          # Chemin vers les secrets pour ce service sp√©cifique
          secrets: |
            secret/data/ci/notification-service DOCKER_PASSWORD | DOCKER_PASSWORD ;
            secret/data/ci/notification-service SONAR_TOKEN | SONAR_TOKEN ;
            secret/data/ci/notification-service DISCORD_WEBHOOK | DISCORD_WEBHOOK ;

      - name: 'Debug Vault Outputs'
        run: |
          if [ -z "${{ steps.vault.outputs.SONAR_TOKEN }}" ]; then
            echo "::error::√âCHEC : Le SONAR_TOKEN est vide. Le r√¥le Vault est probablement mal configur√© pour le d√©p√¥t 'raslenraslen/cloud--forge'."
            exit 1
          else
            echo "‚úÖ SUCC√àS : Le SONAR_TOKEN a bien √©t√© r√©cup√©r√© de Vault."
          fi

  ###################################################
  # JOB 2: Compilation et Tests
  ###################################################
  security-check:
    runs-on: self-hosted
    needs: get-secrets
    steps:
      - name: üöö Checkout code
        uses: actions/checkout@v4

      - name: üì• Download existing .done files
        uses: actions/download-artifact@v4
        with:
          
          name: notification-done-files 
          path: ./.github/done-files/
        continue-on-error: true

      - name: üîç Check if security scan needed
        id: check_scan
        run: |
          CHANGES_DETECTED="${{ needs.build_and_test.outputs.changes_detected }}"
          if [ -f ./.github/done-files/security.done ] && [ "$CHANGES_DETECTED" == "false" ]; then
            echo "skip_scan=true" >> $GITHUB_ENV
          else
            echo "skip_scan=false" >> $GITHUB_ENV
          fi

      - name: üîê Run Trivy Scan
        run: trivy fs --security-checks vuln --format table -o fs-report.txt ./notification-service/

      - name: üìå Mark security as done
        if: ${{ env.skip_scan != 'true' }}
        run: |
          mkdir -p ./.github/done-files/
          echo "done" > ./.github/done-files/security.done

      - name: üì§ Upload updated .done files
        uses: actions/upload-artifact@v4
        with:
          
          name: notification-done-files 
          path: ./.github/done-files/
          retention-days: 3


  ###################################################
  # JOB 3: Analyse de S√©curit√© et Qualit√©
  ###################################################
  SonarQube_Analysis:
    runs-on: self-hosted
    needs: [ security-check , get-secrets ]
    steps:
      - name: Checkout code with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download sonar.done if exists
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: sonar-done
          path: .

      - name: Check if sonar already done
        id: check_sonar
        run: |
          if [ -f sonar.done ]; then
            echo "skip=true" >> $GITHUB_ENV
          else
            echo "skip=false" >> $GITHUB_ENV
          fi

      - name: SonarQube Scan
        if: ${{ env.skip != 'true' }}
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        with:
          projectBaseDir: ./notification-service

        env:
          SONAR_TOKEN: ${{ needs.get-secrets.outputs.SONAR_TOKEN }}
          SONAR_HOST_URL: http://192.168.216.131:9000/

      - name: Download SonarQube JSON Report
        if: ${{ env.skip != 'true' }}
        run: |
          curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "http://192.168.216.131:9000/api/issues/search?componentKeys=CloudForge&resolved=false" \
            -o sonar-report.json

      - name: Upload SonarQube report
        if: ${{ env.skip != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: sonar-report
          path: sonar-report.json

      - name: Mark sonar done
        if: ${{ env.skip != 'true' }}
        run: echo "Sonar done" > sonar.done

      - name: Upload sonar.done
        if: ${{ env.skip != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: sonar-done
          path: sonar.done


  
  notify-discord:
    runs-on: ubuntu-latest
    needs: [get-secrets, SonarQube_Analysis,  security-check]
    if: always() # S'ex√©cute m√™me si un job √©choue
    steps:
      - name: Send Discord notification
        run: |
          STATUS="${{ needs.deploy-to-k8s.result }}"
          if [[ "$STATUS" == "success" ]]; then
            COLOR="28a745" 
            EMOJI="‚úÖ"
            MSG="D√©ploiement r√©ussi"
          else
            COLOR="dc3545" # Rouge
            EMOJI="‚ùå"
            MSG="D√©ploiement √©chou√©"
          fi
          
          # Webhook r√©cup√©r√© de Vault
          WEBHOOK_URL="${{ needs.get-secrets.outputs.discord_webhook }}"
          
          curl -H "Content-Type: application/json" -X POST \
               -d '{"embeds": [{"title": "'"$EMOJI"' Pipeline **notification-service**", "description": "'"$MSG"' sur la branche `main`.", "color": "'"$COLOR"'", "footer": {"text": "Commit par ${{ github.actor }}"}, "timestamp": "'"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"'"}]}' \
               "$WEBHOOK_URL"
